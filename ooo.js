const crc32 = require("crc-32")// библиотека которую нужно установить чтобы использовать функциб хэширования.

// Ассоциативный массив(объект) - это удобный способ хранить данные. Это хеш таблица.
// ключ - значение.
// Хэш-таблица это 2 вещи: индексированный массив и функция для хэшировавния ключей.

// Для реализации ассоциативных массиовв часто используют специальную структуру данных хэш-таблицу. Хэш-таблица это 2 вещи: индексированный массив и функция для хэширования ключей.

//хеширование - операция, которая преобразует любые входные данные в строку(реже число) фиксированной длинны.

const obj = {
    age: 20,
    lastName: "Ponomarev"
}; //это объект-пример, опираясь на него ниже мы своими рукми организовываем хэш-таблицу. Чтобы понять как этот объект хранится в пакете.
// смотрим как под капотом происходит формирование ассоциативного массива, то есть как созраняется в память в наш объект.
const data = "Hello world"; //хэшируем строку
const hash = crc32.str(data); // хэширование -1948869038
console.log(hash);
const index = Math.abs(hash) % 1000; // 38
// сделали хеширование данных data.

//---------------------------------

const internal = [];

const hash1 = crc32.str('age'); // -1590685518 хэш ключа age.
const index1 = Math.abs(hash1) % 1000; // 518 укороченный положительный хэш

internal[index1] = ["age", "20"] // [518: ["age", "20"]]
// ассоциативный массив, который формируется под капотом при создании объекта.
console.log(internal);

const hash2 = crc32.str("age");
const index2 = Math.abs(hash1) % 1000;

console.log(internal[index2], "Прочитал");

//-----------------

// Задание.

const make = () => {
    const internal = [];
    return internal;
}
const set = () => {}
const get = () => {}

const map = make();
let result = get(map, "key");
console.log(result); //null
